import pandas as pd
from datetime import datetime
from spyre import server
from urllib.request import urlopen
import os

if not os.path.exists('csv_data'):
    os.mkdir('csv_data')

# Використовую бібліотеку urllib.request для отримання даних з веб-сторінки.
def download():
    date_time = datetime.now()
    separated_date_time = date_time.strftime('%Y_%m_%d__%H_%M_%S')

    # Звертаємося до 27 різних URL-адрес з даними VHI для різних областей.
    # Для кожного URL використовуємо urlopen для завантаження сторінки та обробки отриманих даних
    for index_s in range(1, 28):
        url = f'https://www.star.nesdis.noaa.gov/smcd/emb/vci/VH/get_TS_admin.php?country=UKR&provinceID={index_s}&year1=1981&year2=2023&type=Mean'
        vhi_url = urlopen(url)

        # Далі зберігаємо ці дані в окремому CSV-файлі з унікальною назвою, яка включає поточну дату та час.
        with open(f'csv_data/{separated_date_time}_vhi_id_{index_s}.csv', 'w') as out:
            dataset_s = vhi_url.read().decode('utf-8').replace('<br>', '').replace('<tt><pre>', '').replace(' ', '').split('\n')
            dataset_s.pop(-1)
            a = dataset_s.pop(0)
            a = a.split(':')[1].split(',')[0]
            out.write(f'{a}\n' + '\n'.join(dataset_s))

class StockExample(server.App):
    # Створюємо заголовок сайту
    title = "Візуалізація даних NOAA"

    # Список компонентів, за якиим ми будемо обирати інформацію для виведення інформації
    inputs = [
        {  # Список для регіонів України, де є назва регіону, та ім'я файлу, звідки беруться дані
            "type": "dropdown",
            "id": "region_data",
            "label": "Region of Ukraine",
            "key": 'region_data',

            "options": [
                {"label": "Cherkasy", "value": "2023_12_10__18_17_49_vhi_id_1.csv"},
                {"label": "Chernihiv", "value": "2023_12_10__18_17_49_vhi_id_2.csv"},
                {"label": "Chernivtsi", "value": "2023_12_10__18_17_49_vhi_id_3.csv"},
                {"label": "Crimea", "value": "2023_12_10__18_17_49_vhi_id_4.csv"},
                {"label": "Dnipro", "value": "2023_12_10__18_17_49_vhi_id_5.csv"},
                {"label": "Donets'k", "value": "2023_12_10__18_17_49_vhi_id_6.csv"},
                {"label": "Ivano-Frankivs'k ", "value": "2023_12_10__18_17_49_vhi_id_7.csv"},
                {"label": "Kharkiv", "value": "2023_12_10__18_17_49_vhi_id_8.csv"},
                {"label": "Kherson", "value": "2023_12_10__18_17_49_vhi_id_9.csv"},
                {"label": "Khmel'nyts'kyy", "value": "2023_12_10__18_17_49_vhi_id_10.csv"},
                {"label": "Kyiv", "value": "2023_12_10__18_17_49_vhi_id_11.csv"},
                {"label": "Kyiv City", "value": "2023_12_10__18_17_49_vhi_id_12.csv"},
                {"label": "Kirovohrad", "value": "2023_12_10__18_17_49_vhi_id_13.csv"},
                {"label": "Luhans'k", "value": "2023_12_10__18_17_49_vhi_id_14.csv"},
                {"label": "L'viv", "value": "2023_12_10__18_17_49_vhi_id_15.csv"},
                {"label": "Mykolayiv", "value": "2023_12_10__18_17_49_vhi_id_16.csv"},
                {"label": "Odessa", "value": "2023_12_10__18_17_49_vhi_id_17.csv"},
                {"label": "Poltava", "value": "2023_12_10__18_17_49_vhi_id_18.csv"},
                {"label": "Rivne", "value": "2023_12_10__18_17_49_vhi_id_19.csv"},
                {"label": "Sevastopol'", "value": "2023_12_10__18_17_49_vhi_id_20.csv"},
                {"label": "Sumy", "value": "2023_12_10__18_17_49_vhi_id_21.csv"},
                {"label": "Ternopil'", "value": "2023_12_10__18_17_49_vhi_id_22.csv"},
                {"label": "Transcarpathia", "value": "2023_12_10__18_17_49_vhi_id_23.csv"},
                {"label": "Vinnytsya", "value": "2023_12_10__18_17_49_vhi_id_24.csv"},
                {"label": "Volyn", "value": "2023_12_10__18_17_49_vhi_id_25.csv"},
                {"label": "Zaporizhzhya", "value": "2023_12_10__18_17_49_vhi_id_26.csv"},
                {"label": "Zhytomyr", "value": "2023_12_10__18_17_49_vhi_id_27.csv"},
            ],

            "value": "2023_12_10__18_17_49_vhi_id_1.csv",
            "action_id": "update_data"
        },
        {  # Створення кнопки для оновлення даних
            "type": "dropdown",
            "id": "index_data",
            "label": "Index of Region",
            "options": [
                {"label": "VHI", "value": "VHI"},
                {"label": "TCI", "value": "TCI"},
                {"label": "VCI", "value": "VCI"},
                {"label": "SMT", "value": "SMT"},
                {"label": "SMN", "value": "SMN"},
            ],
            "key": "index_data",
            "action_id": "update_data"
        },
        {  # Поле для вводу року
            "type": "text",
            "id": "year",
            "label": "Year (1982 - 2023)",
            "value": "1982",
            "key": "year",
            "action_id": "update_data"
        },

        {  # Поле для вводу інтервалів тижнів
            "type": "text",
            "id": "week",
            "label": "Week (1-53) (format: from-to)",
            "value": "1-3",
            "key": "week",
            "action_id": "update_data"
        }

    ]

    # Компонент, а також один зі спосибів керування підгрузкою даних
    controls = [
        {
            "type": "button",
            "id": "update_data",
            "label": "Upload Data"
        }
    ]

    # Три вкладки для веб-інтерфейсу, на яких розміщуюється певна інформація
    tabs = ["Table", "Plot", "Description"]

    # Визначаємо три виходи для веб-інтерфейсу (який тип вмісту відображати на кожній з трьох вкладок)
    outputs = [
        {
            "type": "table",  # вихід міститиме таблицю
            "id": "table_id",
            "control_id": "update_data",
            # вихід з елементом керування (кнопкою, при натисканні на яку відбувається оновлення вмісту)
            "tab": "Table",  # вихід буде відображений на вкладці "Table"
            "on_page_load": False
            # дані не будуть завантажені автоматично при завантаженні сторінки(потрібна взаємодія користувача)
        },
        {
            "type": "plot",
            "id": "plot",
            "control_id": "update_data",
            "tab": "Plot",
            "on_page_load": False
        },
        {
            "type": "html",  # вихід міститиме HTML-вміст
            "id": "custom_html",
            "tab": "Description"  # вихід буде відображений на вкладці "Description"
        }

    ]

    # Метод, який відповідає за отримання даних з файлу, нормалізацію їх, а також форматування таблички. Цей метод тісно пов'язаний з вкладкою "Table"
    # Після виконання коду, то він відповідає за завантаження туди даних. Для коректного відображення, ми видаляємо перші два рядки, для того, щоб залишались лише числові дані.
    # А також, ті числові дані, які нам треба ми переводимо із типу object в numeric (int, float) для корректної та відображення.
    def getData(self, params):
        region = params["region_data"] # Отримання назви регіону з параметрів.
        year = int(params["year"]) # Отримання року з параметрів та перетворення його в ціле число.

        numbers = params["week"] # Отримання діапазону тижнів у форматі рядка з параметрів.
        numbers = numbers.split("-") # Розділення рядка на два числа, які представляють початковий та кінцевий тиждень.
        week_from = int(numbers[0]) # Конвертація початкового тижня у ціле число.
        week_to = int(numbers[1]) # Конвертація кінцевого тижня у ціле число.
        
        # Зчитування CSV-файлу, де вказується роздільник та назви стовпців.
        df = pd.read_csv("csv_data/" + region, delimiter='\,\s+|\,|\s+', engine='python', index_col=False, names=["year", "week", "SMN", "SMT", "VCI", "TCI", "VHI"])
        
        df = df.drop(df.index[:2]) # Видалення перших двох рядків з DataFrame.
        df['year'] = pd.to_numeric(df['year'], errors='coerce') # Перетворення стовпця 'year' у числовий формат.
        df['week'] = pd.to_numeric(df['week'], errors='coerce') # Перетворення стовпця 'week' у числовий формат.

        df = df.loc[df.year == year] # Вибірка лише тих рядків, де рік співпадає із зазначеним роком.
        filtered_data = df[(df.week >= week_from) & (df.week <= week_to)] # Відфільтрування даних за заданим діапазоном тижнів

        return filtered_data

    # Метод, який відповідає за побудову графіку plot. Датафрейм отримує за допомогою методу getData(), також для корректної роботи ми переводу з object в float наші дані.
    # Також трохи нормалізуємо її і будуємо графік з описом.
    def getPlot(self, params):
        # Отримуємо дані на основі заданих параметрів і встановлюємо стовпець 'week' як індекс
        df = self.getData(params).set_index(['week'])
        
        # Конвертуємо певні стовпці в тип float
        df['SMN'] = df['SMN'].astype("float")
        df['SMT'] = df['SMT'].astype("float")
        df['VCI'] = df['VCI'].astype("float")
        df['TCI'] = df['TCI'].astype("float")
        df['VHI'] = df['VHI'].astype("float")

        year = params["year"] # Витягуємо рік з параметрів

        # Витягуємо та розбираємо діапазон тижнів з параметрів
        data_week = params["week"]  # Отримання параметра "week" і збереження його в змінну data_week.
        numbers = data_week.split("-") # Розділення рядка data_week за допомогою дефісу ("-") і збереження результатів у списку numbers
        data_week = data_week.split("-")
        numbers[0] = int(numbers[0]) # Конвертація першого елемента в ціле число
        numbers[1] = int(numbers[1]) # Конвертація другого елемента в ціле число

        # Витягуємо дані індексу з параметрів
        indexes = params["index_data"]

        # Вибираємо лише вказані стовпці індексів з DataFrame
        df = df[[indexes]]
        plot_obj = df.plot() # Створюємо об'єкт графіка на основі вибраних стовпців індексів
        
        # Встановлюємо заголовок графіку
        plot_obj.set_title(indexes + " for the selected year " + year)
        plot_obj.set_ylabel(indexes + ", %") # Встановлюємо підпис для осі y
        # Встановлюємо підпис для осі x
        plot_obj.set_xlabel(
            "The selected period starting from week " + data_week[0] + " to " + data_week[1] + " for the year " + year)
        
        # Отримуємо об'єкт графіку
        line_plot = plot_obj.get_figure()
        return line_plot

    # Сторінка з інфою про лабораторну роботу
    def getHTML(self, params):
        return "<h3>Third Work of Shelestov Laboratory</h3><span>In this laboratory work, I learned to create simple web tools that can help the researcher visualize data. I practiced with the following libraries: cherrypy, jinja2, spyre, matplotlib, pandas, numpy.<br> Web-based application for manual visualization of data, such as the need to reverse the river, the interval of the year, the index and the region that you need. <br>Next, the program will select the required file with data, and also make your adjustments from the displayed one.</span>"

#download()
app = StockExample()
app.launch(port=8080) #Запуск екземпляру класу StockExample за допомогою методу launch.